# name: Java CI with Gradle

# on:
#   push:
#     branches: [ "main" ]

# permissions:
#   contents: read
  
# env:
#   S3_BUCKET_NAME: sideproject-sns
#   working-directory: ./server
#   RESOURCE_PATH: ./server/src/main/resources/application.yml

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 11
#       uses: actions/setup-java@v3
#       with:
#         java-version: '11'
#         distribution: 'temurin'
        
#     # 환경변수 세팅    
#     - name: Set yaml file 
#       uses: microsoft/variable-substitution@v1
#       with:
#         files: ${{ env.RESOURCE_PATH }}
#       env:
#           spring.datasource.url: ${{ secrets.MYSQL_URL }}
#           spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
#           spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}
#           jwt.key: ${{ secrets.JWT_KEY}}
# #           cloud.aws.credentials.access-key: ${{ secrets.AWS_ACCESS_KEY }}
# #           cloud.aws.credentials.secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #           cloud.aws.s3.bucket: ${{ secrets.IMAGE_BUCKET }}
# #           notification.mattermost.webhook-url: ${{ secrets.MATTERMOST_URL }}    
        
#     - name: Change mode gradle
#       run: chmod +x gradlew
#       working-directory: ${{ env.working-directory }}
    
#     - name: Build with Gradle
#       run: ./gradlew clean build
#       working-directory: ${{ env.working-directory }}
    
#     # build한 후 프로젝트를 압축합니다.
#     - name: Make zip file
#       run: zip -r ./practice-deploy.zip .
#       shell: bash
#       working-directory: ${{ env.working-directory }}
    
#     # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
#     # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
#         aws-region: ap-northeast-2
    
#     # 압축한 프로젝트를 S3로 전송합니다.
#     - name: Upload to S3
#       run: aws s3 cp --region ap-northeast-2 ./practice-deploy.zip s3://sideproject-sns/deploy.zip
#       working-directory: ${{ env.working-directory }}

#       # CodeDeploy에게 배포 명령
#     - name: Code Deploy
#       run: >
#         aws deploy create-deployment --application-name sideproject-sns
#         --deployment-config-name CodeDeployDefault.AllAtOnce
#         --deployment-group-name sideproject-sns-grup
#         --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=deploy.zip
